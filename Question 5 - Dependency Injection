



Every Java-based application has a few objects that work together to present what the end-user sees as a working application.
When writing a complex Java application, application classes should be as independent as possible of other Java classes to
increase the possibility to reuse these classes and to test them independently of other classes while unit testing.
Dependency Injection (or sometime called wiring) helps in gluing these classes together and at the same time keeping them
independent.

EXAMPLES

Dependency injection via a class constructor
********************************************
public class TextEditor {
   private SpellChecker spellChecker;
   
   public TextEditor() {
      spellChecker = new SpellChecker();
   }
}


Dependency injection via Setter Methods
********************************************
public class TextEditor {
   private SpellChecker spellChecker;
   
   public TextEditor(SpellChecker spellChecker) {
      this.spellChecker = spellChecker;
   }
}
****************************************************************************





INJECTING INNER BEANS
***************************
inner beans are beans that are defined within the scope of another bean. Thus, a <bean/> element inside the <property/> or 
<constructor-arg/> elements is called inner bean



TextEditor.java.
*****************
public class TextEditor {
   private SpellChecker spellChecker;
   
   // a setter method to inject the dependency.
   public void setSpellChecker(SpellChecker spellChecker) {
      System.out.println("Inside setSpellChecker." );
      this.spellChecker = spellChecker;
   }
   
   // a getter method to return spellChecker
   public SpellChecker getSpellChecker() {
      return spellChecker;
   }
   public void spellCheck() {
      spellChecker.checkSpelling();
   }
}

SpellChecker.java
******************
public class SpellChecker {
   public SpellChecker(){
      System.out.println("Inside SpellChecker constructor." );
   }
   public void checkSpelling(){
      System.out.println("Inside checkSpelling." );
   }
}

MainApp.java
************
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainApp {
   public static void main(String[] args) {
      ApplicationContext context = new ClassPathXmlApplicationContext("Beans.xml");
      TextEditor te = (TextEditor) context.getBean("textEditor");
      te.spellCheck();
   }
}

Following is the configuration file Beans.xml which has configuration for the setter-based injection but using inner beans

<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

   <!-- Definition for textEditor bean using inner bean -->
   <bean id = "textEditor" class = "com.silasonyango.TextEditor">
      <property name = "spellChecker">
         <bean id = "spellChecker" class = "com.silasonyango.SpellChecker"/>
      </property>
   </bean>

</beans>
